from token import Token

class Lexico:
    def __init__(self, entrada):
        self.lista_tokens = [] # lista de tokens identificados
        self.delta = {}
        self.carrega_transicoes()
        self.finais = {1:'ID',2:'IF',3:'ID',4:'ID',5:'ID',6:'ID',7:'WHILE',8:'ID',9:'CONST',10:'ABRE_PAR',11:'ATRIBUICAO',12:'FECHA_BLOCO',13:'ABRE_BLOCO',14:'FECHA_PAR',15:'SOMA',16:'SUB',17:'COMPARA',18:'ID',19:'ID',20:'DEC',21:'WS',22:'VIRGULA',23:'ID',24:'TIPO',25:'PV'}
        self.lexico(entrada)

    def carrega_transicoes(self):
        '''
            Carregar todas as transições definidas no autômato
            ID: [a-z]([a-z]|[0-9])*
            IF: "if"
            TIPO: "int"
            TIPO: "char"
            WHILE: "while"
            DEC: "dec"
            CONST: [0-9]+
            Tokens:
            ABRE_BLOCO: {, FECHA_BLOCO: }, ABRE_PAR: (, FECHA_PAR: ),SOMA:+,SUB: -, ATRIBUICAO:=, COMPARA: ==, VIRGULA: ,WS: , PV: ;
        '''
        self.delta = {
            0:{'a':8,'b':8,'c':8,'d':18,'e':8,'f':8,'g':8,'h':8,'i':1,'j':8,'k':8,'l':8,'m':8,'n':8,'o':8,'p':8,'q':8,'r':8,'s':8,'t':8,'u':8,'v':8,'w':3,'x':8,'y':8,'z':8,'0':9,'1':9,'2':9,'3':9,'4':9,'5':9,'6':9,'7':9,'8':9,'9':9,'{':13,'=':11,'}':12,'-':16,'+':15,'(':10,')':14,' ':21,',':22,';':25},
            1:{'a':8,'b':8,'c':8,'d':8,'e':8,'f':2,'g':8,'h':8,'i':8,'j':8,'k':8,'l':8,'m':8,'n':23,'o':8,'p':8,'q':8,'r':8,'s':8,'t':8,'u':8,'v':8,'w':3,'x':8,'y':8,'z':8,'0':8,'1':8,'2':8,'3':8,'4':8,'5':8,'6':8,'7':8,'8':8,'9':8},
            2:{'a':8,'b':8,'c':8,'d':8,'e':8,'f':8,'g':8,'h':8,'i':8,'j':8,'k':8,'l':8,'m':8,'n':8,'o':8,'p':8,'q':8,'r':8,'s':8,'t':8,'u':8,'v':8,'w':3,'x':8,'y':8,'z':8,'0':8,'1':8,'2':8,'3':8,'4':8,'5':8,'6':8,'7':8,'8':8,'9':8},
            3:{'a':8,'b':8,'c':8,'d':8,'e':8,'f':8,'g':8,'h':4,'i':8,'j':8,'k':8,'l':8,'m':8,'n':8,'o':8,'p':8,'q':8,'r':8,'s':8,'t':8,'u':8,'v':8,'w':3,'x':8,'y':8,'z':8,'0':8,'1':8,'2':8,'3':8,'4':8,'5':8,'6':8,'7':8,'8':8,'9':8},
            4:{'a':8,'b':8,'c':8,'d':8,'e':8,'f':8,'g':8,'h':8,'i':5,'j':8,'k':8,'l':8,'m':8,'n':8,'o':8,'p':8,'q':8,'r':8,'s':8,'t':8,'u':8,'v':8,'w':3,'x':8,'y':8,'z':8,'0':8,'1':8,'2':8,'3':8,'4':8,'5':8,'6':8,'7':8,'8':8,'9':8},
            5:{'a':8,'b':8,'c':8,'d':8,'e':8,'f':8,'g':8,'h':8,'i':8,'j':8,'k':8,'l':6,'m':8,'n':8,'o':8,'p':8,'q':8,'r':8,'s':8,'t':8,'u':8,'v':8,'w':3,'x':8,'y':8,'z':8,'0':8,'1':8,'2':8,'3':8,'4':8,'5':8,'6':8,'7':8,'8':8,'9':8},
            6:{'a':8,'b':8,'c':8,'d':8,'e':7,'f':8,'g':8,'h':8,'i':8,'j':8,'k':8,'l':8,'m':8,'n':8,'o':8,'p':8,'q':8,'r':8,'s':8,'t':8,'u':8,'v':8,'w':3,'x':8,'y':8,'z':8,'0':8,'1':8,'2':8,'3':8,'4':8,'5':8,'6':8,'7':8,'8':8,'9':8},
            7:{'a':8,'b':8,'c':8,'d':8,'e':8,'f':8,'g':8,'h':8,'i':8,'j':8,'k':8,'l':8,'m':8,'n':8,'o':8,'p':8,'q':8,'r':8,'s':8,'t':8,'u':8,'v':8,'w':3,'x':8,'y':8,'z':8,'0':8,'1':8,'2':8,'3':8,'4':8,'5':8,'6':8,'7':8,'8':8,'9':8},
            8:{'a':8,'b':8,'c':8,'d':8,'e':8,'f':8,'g':8,'h':8,'i':8,'j':8,'k':8,'l':8,'m':8,'n':8,'o':8,'p':8,'q':8,'r':8,'s':8,'t':8,'u':8,'v':8,'w':3,'x':8,'y':8,'z':8,'0':8,'1':8,'2':8,'3':8,'4':8,'5':8,'6':8,'7':8,'8':8,'9':8},
            9:{'0':9,'1':9,'2':9,'3':9,'4':9,'5':9,'6':9,'7':9,'8':9,'9':9},
            10:{},
            11:{'=':17},
            12:{},
            13:{},
            14:{},
            15:{},
            16:{},
            17:{},
            18:{'a':8,'b':8,'c':8,'d':8,'e':19,'f':8,'g':8,'h':8,'i':8,'j':8,'k':8,'l':8,'m':8,'n':8,'o':8,'p':8,'q':8,'r':8,'s':8,'t':8,'u':8,'v':8,'w':3,'x':8,'y':8,'z':8,'0':8,'1':8,'2':8,'3':8,'4':8,'5':8,'6':8,'7':8,'8':8,'9':8},
            19:{'a':8,'b':8,'c':20,'d':8,'e':8,'f':8,'g':8,'h':8,'i':8,'j':8,'k':8,'l':8,'m':8,'n':8,'o':8,'p':8,'q':8,'r':8,'s':8,'t':8,'u':8,'v':8,'w':3,'x':8,'y':8,'z':8,'0':8,'1':8,'2':8,'3':8,'4':8,'5':8,'6':8,'7':8,'8':8,'9':8},
            20:{},
            21:{},
            22:{},
            23:{'a':8,'b':8,'c':8,'d':8,'e':8,'f':8,'g':8,'h':8,'i':8,'j':8,'k':8,'l':8,'m':8,'n':8,'o':8,'p':8,'q':8,'r':8,'s':8,'t':24,'u':8,'v':8,'w':3,'x':8,'y':8,'z':8,'0':8,'1':8,'2':8,'3':8,'4':8,'5':8,'6':8,'7':8,'8':8,'9':8},
            24:{'a':8,'b':8,'c':8,'d':8,'e':8,'f':8,'g':8,'h':8,'i':8,'j':8,'k':8,'l':8,'m':8,'n':8,'o':8,'p':8,'q':8,'r':8,'s':8,'t':8,'u':8,'v':8,'w':3,'x':8,'y':8,'z':8,'0':8,'1':8,'2':8,'3':8,'4':8,'5':8,'6':8,'7':8,'8':8,'9':8},
            25:{}
        }
    

    def lexico(self, entrada):
        estado = 0
        i = 0
        lexema = ''
        posini = 0
        while i<=len(entrada):
            try:
                estado = self.delta[estado][entrada[i]]
                lexema += entrada[i]
                i += 1                
            except:
                if estado in self.finais:
                    if self.finais[estado] != 'WS': # vou ignorar espaços
                        tk = Token(self.finais[estado],lexema,posini,posini+len(lexema)-1)
                        self.lista_tokens.append(tk)
                    estado = 0
                    lexema = '' 
                    posini = i
                else:   
                    if len(lexema)>0:               
                        print('Erro léxico. Token inválido: '+lexema)
                    break

    def next_token(self):
        if len(self.lista_tokens) > 0:
            return self.lista_tokens.pop(0)
        return None

    def __str__(self) -> str:
        str = ""
        for it in self.lista_tokens:
            str += " <" + it.token + "> "
        return str